{"version":3,"file":"main.js","mappings":"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","sources":["webpack://js_project/./src/scripts/fish.js","webpack://js_project/./src/scripts/hook.js","webpack://js_project/./src/scripts/start_game.js","webpack://js_project/./src/scripts/game.js","webpack://js_project/./src/index.js"],"sourcesContent":["const FISH_LEFT = new Image();\nFISH_LEFT.src = \"./assets/fish-left.png\"\n\nconst FISH_RIGHT = new Image();\nFISH_RIGHT.src = \"./assets/fish-right.png\"\n\n// const FISH_GOLDEN = new Image();\n// FISH_GOLDEN.src = \"./assets/ufo.png\"\n\nexport default class Fish {\n    constructor({x, y, dx, dy, size}) {\n        this.x = x;\n        this.y = y;\n        this.directionX = dx;\n        this.directionY = dy;\n        this.size = size;\n    }\n\n    draw(ctx) {\n        const image = this.directionX < 0 ? FISH_LEFT : FISH_RIGHT \n        ctx.drawImage(image, this.x, this.y, this.size * 2, this.size)\n    }\n    \n    update() {\n        this.x += this.directionX;\n        this.y += this.directionY; \n    }\n}\n\n","export default class Hook {\n    constructor(x, y, dx, dy, color, canvasHeight) {\n        this.x = x;\n        this.y = y;\n        this.directionX = dx;\n        this.directionY = dy;\n        this.color = color;\n        this.canvasHeight = canvasHeight;\n        this.radius = 20;\n    }\n\n    draw(ctx) {\n        \n        ctx.beginPath();\n        ctx.strokeStyle = this.color;\n        ctx.lineWidth = 1;\n        ctx.moveTo(this.x, 0);\n        ctx.lineTo(this.x, this.y);\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, true);\n    \n        ctx.fillStyle = \"lightblue\";\n        ctx.fill();\n        ctx.lineWidth = 1;\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    update() {\n        this.x += this.directionX;\n        this.y += this.directionY;\n\n        if (this.y >= this.canvasHeight || this.y === 0) {\n            this.directionY = -this.directionY;\n        }\n    }\n\n}","const HAPPY_PENGUIN = new Image();\nHAPPY_PENGUIN.src = \"./assets/happy_penguin.png\"\n\nconst SLEEPY_PENGUIN = new Image(60, 45);\nSLEEPY_PENGUIN.src = \"./assets/sleepy_penguin.png\"\n\nconst GONE_FISHING_PENGUIN = new Image();\nGONE_FISHING_PENGUIN.src = \"./assets/gone_fishing_penguin.png\"\n\nexport default class StartGame {\n    constructor(x, y, size) {\n        this.x = x;\n        this.y = y;\n        this.size = size;\n    }\n\n    draw(ctx) {\n        ctx.beginPath();\n        ctx.fillStyle = \"black\";\n        ctx.font = \"25px Comic Sans MS\", \"Comic Sans\";\n        ctx.stroke();\n        ctx.fillText(`Press ENTER to START GAME`, 325, 250);\n        ctx.closePath();\n        SLEEPY_PENGUIN.onload = () => {\n            ctx.drawImage(SLEEPY_PENGUIN, 0, 300, 250, 250)\n        }\n        GONE_FISHING_PENGUIN.onload = () => {\n            ctx.drawImage(GONE_FISHING_PENGUIN, 375, 300, 250, 250)\n        }\n        HAPPY_PENGUIN.onload = () => {\n            ctx.drawImage(HAPPY_PENGUIN, 750, 300, 250, 250)\n        }\n    }\n}","import Fish from \"./fish\";\nimport Hook from \"./hook\";\nimport StartGame from \"./start_game\";\n\nconst BIG_FISH = 50; //speed = slow \nconst SMALL_FISH = 30; //speed = faster\n// const GOLDEN_FISH = 30; //speed = fastest\n\nexport default class Game {\n    constructor(canvas) {\n        this.ctx = canvas.getContext(\"2d\");\n        this.dimensions = { width: canvas.width, height: canvas.height };\n        this.canvas = canvas;\n        this.hook = new Hook(canvas.width / 3, 0, 0, 6, \"black\", canvas.height)\n        this.fishes = [];\n        this.score = 0;\n        this.startgame = new StartGame(20, 20, 250);\n        this.timeLeft = 60;\n    }\n\n    drawFishes() {\n        this.fishes.forEach(fish => fish.draw(this.ctx));\n    }\n\n    drawHook() {\n        this.hook.draw(this.ctx);\n    }\n\n    drawStartGame() {\n        this.startgame.draw(this.ctx);\n    }\n\n    gameOver() {\n        cancelInterval(timer);\n    }\n\n    scoreDisplay() {\n        // Display the score\n        this.ctx.beginPath();\n        this.ctx.createLinearGradient(0, 0, 200, 0);\n        this.ctx.fillStyle = \"black\";\n        this.ctx.font = \"25px Comic Sans MS\", \"Comic Sans\";\n        this.ctx.stroke();\n        // this.ctx.shadowColor = \"black\";\n        // this.ctx.shadowBlur = 10;\n        this.ctx.fillText(`SCORE: ${this.score}`, this.canvas.width / 30, this.canvas.height / 15);\n        this.ctx.closePath();\n    }\n\n    animate() {\n        this.ctx.clearRect(0, 0, this.dimensions.width, this.dimensions.height);\n        this.scoreDisplay();\n        this.drawFishes();\n        this.fishes.forEach(fish => fish.update());\n        this.drawHook();\n        this.hook.update();\n        this.fishHookCollide();\n        requestAnimationFrame(() => this.animate());\n        \n    }\n\n    fishHookCollide() {\n        this.fishes.forEach((fish) => {\n            const dx = this.hook.x - fish.x;\n            const dy = this.hook.y - fish.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            const isColliding = distance < this.hook.radius + (fish.size);\n\n            if (isColliding) {\n                if (fish.size === BIG_FISH) {\n                    this.score += 5;\n                } else if (fish.size === SMALL_FISH) {\n                    this.score += 10;\n                }\n                this.fishes = this.fishes.filter(f => f !== fish);\n                this.scoreDisplay();\n            }\n        });\n    }\n\n    start() {\n        // Add a button.\n        // this.ctx.strokeStyle = \"white\"\n        // this.ctx.beginPath();\n        // this.ctx.roundRect(450, 250, 100, 50, [40])\n        // this.ctx.stroke();\n        this.drawStartGame();\n        // this.ctx.closePath();\n        // Add event listener for keydown Enter to call startGame()\n\n        document.addEventListener(\"keydown\", e => {\n            if (e.code === \"Enter\") {\n                this.startGame()\n            }\n        });\n    }\n\n    startGame() {\n        document.addEventListener(\"keydown\", e => {\n            if (e.code === \"Space\") {\n                this.hook.directionY = 6; // 5 is the speed, should match directionY\n            }\n        });\n\n        setInterval(() => this.loadFish(), 500);\n        this.animate();\n    }\n\n    loadFish() {\n        const sizes = [BIG_FISH, SMALL_FISH]\n        const size = sizes[Math.floor(Math.random() * sizes.length)];\n\n        const speeds = [6, 7];\n        const slowSpeed = 3;\n        const speed = speeds[Math.floor(Math.random() * speeds.length)];\n\n        const directions = [0, this.canvas.width]\n        const direction = directions[Math.floor(Math.random() * directions.length)];\n        \n        const fishParams = {\n            x: direction,\n            y: Math.random() * this.canvas.height, \n            dx: 0, \n            dy: 0, \n            size: size\n        }\n\n        if (size === BIG_FISH && direction === 0) {\n            fishParams.dx = slowSpeed;\n        } else if (size === BIG_FISH && direction === this.canvas.width) {\n            fishParams.dx = -slowSpeed;\n        } else if (direction === 0) {\n            fishParams.dx = speed;\n        } else {\n            fishParams.dx = -speed;\n        }\n\n        this.fishes.push(new Fish(fishParams))\n    }\n    \n}","import Game from \"./scripts/game\";\n\n//adding DOMContentLoaded to ensure canvas element is loaded before accessing it\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const canvas = document.getElementById(\"gameBox\");\n    const ctx = canvas.getContext(\"2d\");\n\n    const CANVAS_WIDTH = canvas.width = 1000;\n    const CANVAS_HEIGHT = canvas.height = 600;\n\n    const game = new Game(canvas);\n    game.start();\n});"],"names":["FISH_LEFT","Image","src","FISH_RIGHT","Fish","constructor","x","y","dx","dy","size","this","directionX","directionY","draw","ctx","image","drawImage","update","Hook","color","canvasHeight","radius","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","arc","Math","PI","fillStyle","fill","closePath","HAPPY_PENGUIN","SLEEPY_PENGUIN","GONE_FISHING_PENGUIN","StartGame","font","fillText","onload","Game","canvas","getContext","dimensions","width","height","hook","fishes","score","startgame","timeLeft","drawFishes","forEach","fish","drawHook","drawStartGame","gameOver","cancelInterval","timer","scoreDisplay","createLinearGradient","animate","clearRect","fishHookCollide","requestAnimationFrame","sqrt","filter","f","start","document","addEventListener","e","code","startGame","setInterval","loadFish","sizes","floor","random","length","speeds","speed","directions","direction","fishParams","push","getElementById"],"sourceRoot":""}